async function loadRequests() {
    try {
        const response = await fetch('api/get-admin-applications.php', {
            method: 'GET',
            credentials: 'include'
        });

        const result = await response.json();

        if (response.ok) {
            const tbody = document.querySelector('#requests-table tbody');
            tbody.innerHTML = '';

            if (result.length === 0) {
                document.getElementById('result').textContent = '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫.';
                return;
            }

            result.forEach(req => {
                const tr = document.createElement('tr');
                tr.innerHTML = `
                            <td>${req.fio}</td>
                            <td>${req.service_date}</td>
                            <td>${req.service_time}</td>
                            <td>${req.service_type === 'other' ? '–ò–Ω–∞—è —É—Å–ª—É–≥–∞' : req.service_type}</td>
                            <td>${req.other_service_text || ''}</td>
                            <td>${req.address}</td>
                            <td>${req.phone}</td>
                            <td>${req.payment_method === 'cash' ? '–ù–∞–ª–∏—á–Ω—ã–µ' : '–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞'}</td>
                            <td>
                                <select class="status-select" data-id="${req.id}">
                                    <option value="–≤ —Ä–∞–±–æ—Ç–µ" ${req.status == '–≤ —Ä–∞–±–æ—Ç–µ' ? 'selected' : ''}>–í —Ä–∞–±–æ—Ç–µ</option>
                                    <option value="–≤—ã–ø–æ–ª–Ω–µ–Ω–æ" ${req.status === '–≤—ã–ø–æ–ª–Ω–µ–Ω–æ' ? 'selected' : ''}>–í—ã–ø–æ–ª–Ω–µ–Ω–æ</option>
                                    <option value="–æ—Ç–º–µ–Ω–µ–Ω–æ" ${req.status === '–æ—Ç–º–µ–Ω–µ–Ω–æ' ? 'selected' : ''}>–û—Ç–º–µ–Ω–µ–Ω–æ</option>
                                </select>
                                
                            </td>
                            <td> <input class="cancel-reason form-control mt-1" placeholder="–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–º–µ–Ω—ã"
                                value="${req.cancel_reason || ''}"
                                style="display: ${req.status === '–æ—Ç–º–µ–Ω–µ–Ω–æ' ? 'block' : 'none'}" />
                            </td>
                            <td><button class="save">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button></td>
                        `;
                tbody.appendChild(tr);

                const select = tr.querySelector('.status-select');
                const reasonInput = tr.querySelector('.cancel-reason');
                const saveBtn = tr.querySelector('.save');

                select.addEventListener('change', () => {
                    reasonInput.style.display = select.value === '–æ—Ç–º–µ–Ω–µ–Ω–æ' ? 'block' : 'none';
                });

                saveBtn.addEventListener('click', async () => {
                    const status = select.value;
                    const cancelReason = reasonInput.value.trim();
                    const id = req.id;

                    // üëá –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ "–æ—Ç–º–µ–Ω–µ–Ω–æ"
                    if (status === '–æ—Ç–º–µ–Ω–µ–Ω–æ' && !cancelReason) {
                        alert('–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–º–µ–Ω—ã!');
                        return;
                    }

                    try {
                        const response = await fetch('api/update-status.php', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            credentials: 'include',
                            body: JSON.stringify({ id, status, cancel_reason: cancelReason })
                        });

                        const result = await response.json();
                        if (response.ok) {
                            alert('–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω');
                            loadRequests(); // –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
                        } else {
                            alert(result.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏');
                        }
                    } catch (err) {
                        alert('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ' + err.message);
                    }
                });


            });
        } else {
            document.getElementById('result').textContent = result.error || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏';
        }
    } catch (err) {
        document.getElementById('result').textContent = '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ' + err.message;
    }
}

function addEventListener(req, tr) {

}

loadRequests();
